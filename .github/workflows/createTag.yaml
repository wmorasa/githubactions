name: CreateTag
 
on:
  workflow_dispatch:
    inputs:
      tagName:
        required: true
        type: string  
      version:
        required: false
      
  push:
    # branches: ['main']
      
env:
  ARTIFACTORY_REGISTRY: https://bpd01artifactory.glideportal.transurban.com.au/artifactory
  GITHUB_CONTEXT: ${{toJson(github)}}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  CreateTag:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: write
      packages: write
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0

      - name: getBranchName
        id: getBranchName
        run: |   
          branchName=$(echo ${{github.ref_name}})
          echo "getBranchName=$branchName">> $GITHUB_OUTPUT


      - name: listTag
        # run: git describe --tags `git rev-list --tags --max-count=1`    
        run: git tags -l

      - name: createTag
        id: createTag
        env: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
        run: |      
          echo "${{steps.getBranchName.outputs.getBranchName}}"
          
          git show-ref --tags | grep -c "${{steps.getBranchName.outputs.getBranchName}}"
        
          # tagValue=$(git show-ref --tags)

          if [[ -z "$tagValue" ]]; then
            createTaG=${{steps.getBranchName.outputs.getBranchName}}-0001
          else
            createTag=$(git describe --tags --abbrev=0 | awk -F. '{OFS="-"; $NF+=1; print $0}')
          fi
          echo "$createTag"

         

##------------------------Generate Tag if not taken via input-----------------------------------------------##
## Get the branch
## Get tags with branchname as prefix
## Get the latest version number - 0001 or 0002
## if no tag, start with zero
## else append to the version with +1 
## Create Tag from branch

          # echo "Repository: ${{ github.repository }}"   
          # echo "Owner: ${{ github.repository_owner }}" 
          # branchName=$(echo ${{github.ref_name}})
          # echo $branchName
          # echo list tags
          # # git fetch --tags
          # echo filtered tags
          # taggingName=$(git fetch --tags | grep -c $branchName)
          # echo $taggingName 
          # echo "latest release: '${{ steps.getTags.outputs.data }}'"     

          # idenitfy patchverrsion and increment if found or create new if not found
          # # Increment the patch version by 1
          # patchVersion=0001
          # patchVersion=$((patchVersion + 1))

          # if [[ -z "$patchVersion" ]]; then
          #   patchVersion=0001
          #   else
          #   patchVersion=$((patchVersion + 1))
          #     patchVersion=$(echo "$latestTag" | awk -F. '{print $3}')
          #     addTag="$NEW_TAG-${patchVersion}"
          # fi
          
          ## echo tag name and add git config and then command to create tag here
          # echo "$latestTag"
          # echo "$NEW_TAG"  
          # git config --global user.name "${{github.actor}}"
          # git config --global user.email "${{github.actor}}@users.noreply.github.com" 




## Take branchName and create tag out of it. 

      # - name: getTags
      #   id: getTags
      #   run: |
      #     
      #     git fetch --tags
      #     "echo latest release: '${{ steps.getTags.outputs.data }}'"  
